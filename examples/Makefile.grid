# $Id$
# $Log$
# Revision 1.1  2004/03/24 23:57:08  oliver
# added gridcount 1.0 to contrib section and patched configure.ac so that the Makefile for gridcount is generated
#
# Revision 1.5  2003/08/08 18:39:02  oliver
# cleaning up a bit for a release of g_ri3Dc
#
# Revision 1.4  2003/08/07 14:01:59  cox
# - added to USAGE
# - define programmes with full path in the preamble
# - comment on making slices
#
# Revision 1.3  2002/08/20 23:09:46  oliver
# no major things, cleanup & checkin before I go home
#
# Revision 1.2  2002/08/20 19:20:51  oliver
# Forgot the most important thing: How to use it--'make grid' ;-)
#
# Revision 1.1  2002/08/20 19:15:29  oliver
# Example for a standalone Makefile-driven analysis with g_ri3Dc and a_ri3Dc
#
# 
# SYNOPSIS: automatically perform some grid analysis with 
#           g_ri3Dc and a_ri3Dc 
#
# USAGE:    make grid                      (if renamed to Makefile)
#
# INSTALLATION:
#   1. compile g_ri3Dc and a_ri3Dc
#   2. copy this template Makefile.grid into your working directory and
#      rename it to Makefile 
#   3. edit it (DIR is your workingdir, paths to programmes, etc, dimensions
#      of your pore (GRID_CPOINT, Z1, Z2, etc)
#   4. make grid
#      and files should appear in Grid.d
#
# LIMITATIONS: - pore is assumed to be pointing parallel to z
#              - poor results on non-cylindrical pores
#
# PARAMETERS:
# 
# Set the parameters at the top of the file. You probably also
# want to change the radii further down (all variables start with GRID_)
# - you might need to specify a -cpoint to g_ri3Dc to center the grid on
#   if it is not in the center of the box already (you need a centered
#   trajectory anyway) 
# - for a meaningfule radial distribution function adjust GRID_Z1,Z2 and
#   GRID_R_P to values that encompass the water filled cavity but not
#   much more
# A lot of files are generated but we only keep the ones we are
# interested in in Grid.d and delete all the others once we are finished.
#
# REQUIRES:
#            
# For viewing densities and generation of eps files, xfarbe is required.
# Get it from  http://www.fhi-berlin.mpg.de/~grz/pub/xfarbe.html
#     
# AUTHOR: Oliver Beckstein <oliver@biop.ox.ac.uk>


DIR        := .#
GENRUN_MD  := $(DIR)/md.tpr
TRAJECTORY := $(DIR)/traj.xtc

MAKEB := $(MAKE)


SOL_NDX := sol.ndx

$(SOL_NDX): $(GENRUN_MD)
	echo -e "keep 0\ndel 0\nr SOL\nq\n" |  $(MAKE_NDX) -f $< -o $@ 

##############
#
# programmes
#
##############

GMX_D     := /usr/local/gromacs/i686-pc-linux-gnu#
GMX_BIN   := $(GMX_D)/bin#

MAKE_NDX := $(GMX_BIN)/make_ndx
G_RI3DC  := $(GMX_BIN)/g_ri3Dc
A_RI3DC  := $(GMX_BIN)/a_ri3Dc
XFARBE   := /usr/local/bin/xfarbe

###################################################
#
#  (using g_ri3Dc)
#
###################################################

GRID_DIR  := Grid.d#
GRID_RESOLUTION := 0.05      # size of a cell in nm 

#############################################################################
# Description of output files: 
#
# (1) create density of the whole box (take off 0.2nm from top to
#     remove a fringe due to the varying box size, and for symmetry, 
#     start 0.2nm from bottom) at the standard resolution 
# (2) create data files & eps from different regions (using a_ri3Dc's  
#     readjustment options). '*' means max (or for z2 += -0.2)
#     
#     R    z1     z2         graph             eps   
#     -----------------------------------------------
#     *     *      *         rz                 x    
#     *     *      *         profile                 
#     R_M  Z1     Z2         xy                 x    
#     R_M  Z1     Z2         rdf
#     R_M   *      *         zdf (mouth+pore)
#     R_P   *      *         zdf (pore)

##############################################################################
# Geometry parameters (refer to the table above where they are needed)
#
# CUSTOMIZE THESE PARAMETERS:

GRID_CPOINT := 3.47  2.47  4.48
GRID_RMAX  := 2
GRID_R_M   := 1
GRID_R_P   := 0.7
GRID_Z_BOT := 0.2
GRID_Z_TOP := 8.2
Z1 := 3.0   # use Z1 and Z2 to produce slices (see slicer.pl
Z2 := 6.5   # example script)



GRID_DENSITY := $(GRID_DIR)/grid.dat
GRID_PROFILE := $(GRID_DIR)/profile.xvg
GRID_XY      := $(GRID_DIR)/xyp.dat
GRID_XZ      := $(GRID_DIR)/xzp.dat
GRID_YZ      := $(GRID_DIR)/yzp.dat
GRID_RZ      := $(GRID_DIR)/rzp.dat
GRID_RDF     := $(GRID_DIR)/rdf.xvg
GRID_ZDF     := $(GRID_DIR)/zdf.xvg       # cylinder through pore
GRID_ZDF_M   := $(GRID_DIR)/zdf_M.xvg     # cylinder through mouth

GRID_XY_EPS  := $(GRID_DIR)/xyp.eps
GRID_XZ_EPS  := $(GRID_DIR)/xzp.eps
GRID_YZ_EPS  := $(GRID_DIR)/yzp.eps
GRID_RZ_EPS  := $(GRID_DIR)/rzp.eps


GRID_FILES := $(GRID_PROFILE) $(GRID_ZDF) $(GRID_ZDF_M) \
	      $(GRID_XY) $(GRID_YZ) $(GRID_XZ)  $(GRID_RZ) $(GRID_RDF) \
	      $(GRID_XY_EPS) $(GRID_RZ_EPS)

.PHONY: grid grid-large grid-coarse clean-grid clean-agrid clean-grid-junk \
        help-grid clean-backup

clean-grid-junk: clean-backup
	-rm -f *xyp.dat xzp.dat yzp.dat *rzp.dat *rdf.xvg zdf.xvg \
	       gridasc.dat profile.xvg
	cd $(GRID_DIR) &&  \
	  rm -f \#*.dat*\# \#*.xvg*\#

clean-agrid: clean-grid-junk 
	-rm -f $(GRID_FILES) 

clean-grid: clean-agrid
	-rm -f $(GRID_DENSITY) 

clean-backup:
	-rm -f \#*\#


help-grid:
	@echo "All results are store in the directory $(GRID_DIR)"
	@echo "grid      create all datafiles (and make the density $(GRID_DENSITY) as needed"
	@echo "          $(GRID_FILES)"
	@echo "clean-grid-junk         get rid of other files created by a_ri3Dc"
	@echo "GRID_LEGEND= on|off     legend in xfarbe eps files"
	@echo "GRID_RESOLUTION=$(GRID_RESOLUTION)nm  specify $(GRID_DENSITY) as target"

$(GRID_DIR):
	mkdir $@

.PHONY: $(GRID_FILES)
grid: $(GRID_FILES)
	$(MAKEB) clean-grid-junk


$(GRID_DENSITY): $(SOL_NDX) $(GRID_DIR)
	$(G_RI3DC) -nice 12 -s $(GENRUN_MD) -f $(TRAJECTORY) -m -n $(SOL_NDX) \
	        -delta $(GRID_RESOLUTION)  -subtitle "M2delta " \
	        -cpoint $(GRID_CPOINT) \
		-grid $@		

$(GRID_RZ) $(GRID_PROFILE) $(GRID_XZ) $(GRID_YZ): $(GRID_DENSITY)
	test -f $(GRID_DENSITY) || $(MAKEB) $(GRID_DENSITY) 
	$(A_RI3DC) -nice 12 -unit SPC -nomirror -grid $(GRID_DENSITY) \
	         -xfarbe-maxlevel 1.2 -R $(GRID_RMAX) \
	        -z1 $(GRID_Z_BOT) -z2 $(GRID_Z_TOP)   \
	        -rzp $(GRID_RZ)  -profile $(GRID_PROFILE) \
	         -xzp $(GRID_XZ) -yzp $(GRID_YZ)

$(GRID_XY) $(GRID_RDF): $(GRID_DENSITY)
	test -f $(GRID_DENSITY) || $(MAKEB) $(GRID_DENSITY) 
	$(A_RI3DC) -nice 12 -unit SPC -nomirror -grid $(GRID_DENSITY) \
	        -z1 $(Z1) -z2 $(Z2) -R $(GRID_R_M)   -xfarbe-maxlevel 1.2 \
	        -xyp $(GRID_XY) -rdf $(GRID_RDF)

$(GRID_ZDF): $(GRID_DENSITY)
	test -f $(GRID_DENSITY) || $(MAKEB) $(GRID_DENSITY) 
	$(A_RI3DC) -nice 12 -unit SPC -nomirror -grid $(GRID_DENSITY) \
	        -z1 $(GRID_Z_BOT) -z2 $(GRID_Z_TOP)   \
	        -R $(GRID_R_P)   -xfarbe-maxlevel 1.2 \
		-zdf $@

$(GRID_ZDF_M): $(GRID_DENSITY)
	test -f $(GRID_DENSITY) || $(MAKEB) $(GRID_DENSITY) 
	$(A_RI3DC) -nice 12 -unit SPC -nomirror -grid $(GRID_DENSITY) \
	        -z1 $(GRID_Z_BOT) -z2 $(GRID_Z_TOP)   \
	        -R $(GRID_R_M) -xfarbe-maxlevel 1.2 \
	    	-zdf $@


# the -(...; true) is needed (for some bizarre reason xfarbe flags a return
# status of 1 which screws my Makefile)
GRID_TMP    := tmp.dat
GRID_LEGEND := on#

%p.eps : %p.dat
	@echo "Creating eps file [$@] from [$<]"
	@echo "Chopping the head(er) off"
	sed -e '1s|.*||g' $< > $(GRID_TMP)
	@echo "and setting legend = $(GRID_LEGEND)"
	cp XFarbe XFarbe.tmp
	sed -e 's/\(xfarbe.legend *:\).*/\1 $(GRID_LEGEND)/' XFarbe.tmp > XFarbe
	rm XFarbe.tmp

	export XAPPLRESDIR=.; \
	$(XFARBE) -xrm "xfarbe.psfile: $@" -xrm "xfarbe.posta4p: on" $(GRID_TMP); \
	true

	@echo "...done (Ignore the last error!)"
	-rm -f $(GRID_TMP)

$(GRID_RZ_EPS): $(GRID_RZ)
	cd $(GRID_DIR); \
	$(MAKE) -f ../Makefile $(notdir $@)

$(GRID_XY_EPS): $(GRID_XY)
	cd $(GRID_DIR); \
	$(MAKE) -f ../Makefile $(notdir $@)

$(GRID_XZ_EPS): $(GRID_XZ)
	cd $(GRID_DIR); \
	$(MAKE) -f ../Makefile $(notdir $@)

$(GRID_YZ_EPS): $(GRID_YZ)
	cd $(GRID_DIR); \
	$(MAKE) -f ../Makefile $(notdir $@)


